{"version":3,"sources":["impression.component.ts"],"names":[],"mappings":"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","file":"impression.component.js","sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpEventType } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FileService } from 'src/app/services/file.service';\n\n@Component({\n  selector: 'app-impression',\n  templateUrl: './impression.component.html',\n  styleUrls: ['./impression.component.css']\n})\nexport class ImpressionComponent {\n\n  filenames: string[] = [];\n  fileStatus = { status: '', requestType: '', percent: 0 };\n  \n  constructor(private fileService: FileService) {}\n\n  // define a function to upload files\n  onUploadFiles(files: File[]): void {\n    const formData = new FormData();\n    for (const file of files) { formData.append('files', file, file.name); }\n    this.fileService.upload(formData).subscribe(\n      event => {\n        console.log(event);\n        this.resportProgress(event);\n      },\n      (error: HttpErrorResponse) => {\n        console.log(error);\n      }\n    );\n  }\n\n  // define a function to download files\n  onDownloadFile(filename: string): void {\n    this.fileService.download(filename).subscribe(\n      event => {\n        console.log(event);\n        this.resportProgress(event);\n      },\n      (error: HttpErrorResponse) => {\n        console.log(error);\n      }\n    );\n  }\n\n  private resportProgress(httpEvent: HttpEvent<string[] | Blob>): void {\n    switch(httpEvent.type) {\n      case HttpEventType.UploadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total!, 'Uploading... ');\n        break;\n      case HttpEventType.DownloadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total!, 'Downloading... ');\n        break;\n      case HttpEventType.ResponseHeader:\n        console.log('Header returned', httpEvent);\n        break;\n      case HttpEventType.Response:\n        if (httpEvent.body instanceof Array) {\n          this.fileStatus.status = 'done';\n          for (const filename of httpEvent.body) {\n            this.filenames.unshift(filename);\n          }\n        } else {\n          saveAs(new File([httpEvent.body!], httpEvent.headers.get('File-Name')!, \n                  {type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`}));\n          // saveAs(new Blob([httpEvent.body!], \n          //   { type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`}),\n          //    httpEvent.headers.get('File-Name'));\n        }\n        this.fileStatus.status = 'done';\n        break;\n        default:\n          console.log(httpEvent);\n          break;\n      \n    }\n  }\n\n  private updateStatus(loaded: number, total: number, requestType: string): void {\n    this.fileStatus.status = 'progress';\n    this.fileStatus.requestType = requestType;\n    this.fileStatus.percent = Math.round(100 * loaded / total);\n  }\n\n}\nfunction saveAs(arg0: File) {\n  throw new Error('Function not implemented.');\n}\n\n"]}