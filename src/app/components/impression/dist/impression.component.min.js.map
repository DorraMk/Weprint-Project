{"version":3,"sources":["impression.component.ts"],"names":["http_1","require","core_1","ImpressionComponent","fileService","this","filenames","fileStatus","status","requestType","percent","prototype","onUploadFiles","files","_this","formData","FormData","_i","files_1","length","file","append","name","upload","subscribe","event","console","log","resportProgress","error","onDownloadFile","filename","download","httpEvent","type","HttpEventType","UploadProgress","updateStatus","loaded","total","DownloadProgress","ResponseHeader","Response","body","Array","_a","unshift","saveAs","File","headers","get","Math","round","__decorate","Component","selector","templateUrl","styleUrls","arg0","Error","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,wBACAC,OAAAD,QAAA,iBAQAE,oBAAA,WAKE,SAAAA,EAAoBC,GAAAC,KAAAD,YAAAA,EAHpBC,KAAAC,UAAsB,GACtBD,KAAAE,WAAa,CAAEC,OAAQ,GAAIC,YAAa,GAAIC,QAAS,GAuEvD,OAlEEP,EAAAQ,UAAAC,cAAA,SAAcC,GAEZ,IAFF,IAAAC,EAAAT,KACQU,EAAW,IAAIC,SACFC,EAAA,EAAAC,EAAAL,EAAAI,EAAAC,EAAAC,OAAAF,IAAO,CAArB,IAAMG,EAAIF,EAAAD,GAAaF,EAASM,OAAO,QAASD,EAAMA,EAAKE,MAChEjB,KAAKD,YAAYmB,OAAOR,GAAUS,UAChC,SAAAC,GACEC,QAAQC,IAAIF,GACZX,EAAKc,gBAAgBH,IAEvB,SAACI,GACCH,QAAQC,IAAIE,MAMlB1B,EAAAQ,UAAAmB,eAAA,SAAeC,GAAf,IAAAjB,EAAAT,KACEA,KAAKD,YAAY4B,SAASD,GAAUP,UAClC,SAAAC,GACEC,QAAQC,IAAIF,GACZX,EAAKc,gBAAgBH,IAEvB,SAACI,GACCH,QAAQC,IAAIE,MAKV1B,EAAAQ,UAAAiB,gBAAR,SAAwBK,GACtB,OAAOA,EAAUC,MACf,KAAKlC,OAAAmC,cAAcC,eACjB/B,KAAKgC,aAAaJ,EAAUK,OAAQL,EAAUM,MAAQ,iBACtD,MACF,KAAKvC,OAAAmC,cAAcK,iBACjBnC,KAAKgC,aAAaJ,EAAUK,OAAQL,EAAUM,MAAQ,mBACtD,MACF,KAAKvC,OAAAmC,cAAcM,eACjBf,QAAQC,IAAI,kBAAmBM,GAC/B,MACF,KAAKjC,OAAAmC,cAAcO,SACjB,GAAIT,EAAUU,gBAAgBC,MAAO,CACnCvC,KAAKE,WAAWC,OAAS,OACzB,IAAuB,IAAAS,EAAA,EAAA4B,EAAAZ,EAAUU,KAAV1B,EAAA4B,EAAA1B,OAAAF,IAAgB,CAAlC,IAAMc,EAAQc,EAAA5B,GACjBZ,KAAKC,UAAUwC,QAAQf,SAGzBgB,OAAO,IAAIC,KAAK,CAACf,EAAUU,MAAQV,EAAUgB,QAAQC,IAAI,aACjD,CAAChB,KAASD,EAAUgB,QAAQC,IAAI,gBAAe,oBAKzD7C,KAAKE,WAAWC,OAAS,OACzB,MACA,QACEkB,QAAQC,IAAIM,KAMZ9B,EAAAQ,UAAA0B,aAAR,SAAqBC,EAAgBC,EAAe9B,GAClDJ,KAAKE,WAAWC,OAAS,WACzBH,KAAKE,WAAWE,YAAcA,EAC9BJ,KAAKE,WAAWG,QAAUyC,KAAKC,MAAM,IAAMd,EAASC,IAvE3CpC,EAAmBkD,WAAA,CAL/BnD,OAAAoD,UAAU,CACTC,SAAU,iBACVC,YAAa,8BACbC,UAAW,CAAC,iCAEDtD,GAAb,GA2EA,SAAS4C,OAAOW,GACd,MAAM,IAAIC,MAAM,6BA5ELC,QAAAzD,oBAAAA","file":"impression.component.min.js","sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpEventType } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FileService } from 'src/app/services/file.service';\n\n@Component({\n  selector: 'app-impression',\n  templateUrl: './impression.component.html',\n  styleUrls: ['./impression.component.css']\n})\nexport class ImpressionComponent {\n\n  filenames: string[] = [];\n  fileStatus = { status: '', requestType: '', percent: 0 };\n  \n  constructor(private fileService: FileService) {}\n\n  // define a function to upload files\n  onUploadFiles(files: File[]): void {\n    const formData = new FormData();\n    for (const file of files) { formData.append('files', file, file.name); }\n    this.fileService.upload(formData).subscribe(\n      event => {\n        console.log(event);\n        this.resportProgress(event);\n      },\n      (error: HttpErrorResponse) => {\n        console.log(error);\n      }\n    );\n  }\n\n  // define a function to download files\n  onDownloadFile(filename: string): void {\n    this.fileService.download(filename).subscribe(\n      event => {\n        console.log(event);\n        this.resportProgress(event);\n      },\n      (error: HttpErrorResponse) => {\n        console.log(error);\n      }\n    );\n  }\n\n  private resportProgress(httpEvent: HttpEvent<string[] | Blob>): void {\n    switch(httpEvent.type) {\n      case HttpEventType.UploadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total!, 'Uploading... ');\n        break;\n      case HttpEventType.DownloadProgress:\n        this.updateStatus(httpEvent.loaded, httpEvent.total!, 'Downloading... ');\n        break;\n      case HttpEventType.ResponseHeader:\n        console.log('Header returned', httpEvent);\n        break;\n      case HttpEventType.Response:\n        if (httpEvent.body instanceof Array) {\n          this.fileStatus.status = 'done';\n          for (const filename of httpEvent.body) {\n            this.filenames.unshift(filename);\n          }\n        } else {\n          saveAs(new File([httpEvent.body!], httpEvent.headers.get('File-Name')!, \n                  {type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`}));\n          // saveAs(new Blob([httpEvent.body!], \n          //   { type: `${httpEvent.headers.get('Content-Type')};charset=utf-8`}),\n          //    httpEvent.headers.get('File-Name'));\n        }\n        this.fileStatus.status = 'done';\n        break;\n        default:\n          console.log(httpEvent);\n          break;\n      \n    }\n  }\n\n  private updateStatus(loaded: number, total: number, requestType: string): void {\n    this.fileStatus.status = 'progress';\n    this.fileStatus.requestType = requestType;\n    this.fileStatus.percent = Math.round(100 * loaded / total);\n  }\n\n}\nfunction saveAs(arg0: File) {\n  throw new Error('Function not implemented.');\n}\n\n"]}